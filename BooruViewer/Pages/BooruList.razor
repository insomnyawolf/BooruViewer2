@page "/"
@using BooruApi
@using BooruApi.Models
@using BooruViewer.Services
@using BooruViewer.ServicesJs

@inject JavascriptInteropHelper JavascriptInteropHelper
@inject GelbooruService GelbooruService

<div class="navbar sticky">
    <!-- permanent part -->
    <div class="flex-position-workaround"></div>
    <div class="toggle-nav-bar" @onclick="ToggleNavMenu">
        <i class="ti ti-menu-2"></i>
    </div>
    <!-- sometimes hidden part -->
    <div class="@NavMenuCssClass">
        <!--search-settings-->
        <TokenizedAutocompolete OnTokensChange="OnSearchChanged"></TokenizedAutocompolete>
    </div>
    <div class="@NavMenuCssClass">Rating Placeholder</div>
    <div class="@NavMenuCssClass">image size placeholder</div>
    <div class="@NavMenuCssClass">
        board selector placeholder
        maybe local favourites too?
    </div>
</div>

@code {
    private string NavMenuCssClass { get; set; } = "search-settings";

    private void ToggleNavMenu()
    {
        if (NavMenuCssClass.Contains(" hidden"))
        {
            NavMenuCssClass = NavMenuCssClass.Replace(" hidden", "");
        }
        else
        {
            NavMenuCssClass += " hidden";
        }
    }
}

<div class="content">
    @if (GelbooruService.LastPostResponse == null || GelbooruService.IsLoadingNewSearch)
    {
        <h1>Loading...</h1>
    }
    else
    {
        if (GelbooruService.LastPostResponse.Attributes.Count == 0)
        {
            <h1>No Results</h1>
        }
        else
        {
            @foreach (var item in GelbooruService.Posts)
            {
                <BooruPost Post="@item"></BooruPost>
            }
            @*
    <div id="pagination">
    <button @onclick="async() => { CurrentPage--; await LoadPosts();}" disabled="@PreviousPageAvailable()">
    PreviousPage
    </button>
    <button @onclick="async() => { CurrentPage++; await LoadPosts();}" disabled="@NextPageAvailable()">
    NextPage
    </button>
    </div>
    *@
        }
    }
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        JavascriptInteropHelper.OnScroll += OnScroll;

        await GelbooruService.OnInitializedAsync();
    }

    private async void OnScroll(int positionX, int currentScrollTopPosition)
    {
        var currentScrollBottomPosition = currentScrollTopPosition + JavascriptInteropHelper.Size.Y;
        var maxScrollHeight = await JavascriptInteropHelper.GetMaxScrollHeight();

        // Phones Are Weird => I don't even know why this works
        var loadNewPagePosition = maxScrollHeight - (JavascriptInteropHelper.Size.Y);

        if (currentScrollBottomPosition < loadNewPagePosition)
        {
            // Do nothing
            return;
        }

        // Validations are made inside
        if (!await GelbooruService.LoadNextPage())
        {
            // Does not need ui refreshing
            return;
        }

        StateHasChanged();
    }

    private async void OnSearchChanged(List<string> tagsRaw)
    {
        var tags = new List<Tag>();

        foreach (var item in tagsRaw)
        {
            tags.Add(new Tag()
                {
                    Value = item,
                });
        }

        GelbooruService.GelbooruPostQueryHelper.Tags = tags;

        await GelbooruService.NewSearch(GelbooruService.GelbooruPostQueryHelper);

        StateHasChanged();

        await JavascriptInteropHelper.SetScroll(new Point() { X = 0, Y = 0, });
    }

    public void Dispose()
    {
        JavascriptInteropHelper.OnScroll -= OnScroll;
    }
}