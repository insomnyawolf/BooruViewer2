@using BooruApi
@using BooruViewer.Services

@inject GelbooruService GelbooruService

<div class="tokenized-autocomplete">
    <div>
        Selected Tags:
    </div>
    <div class="selected-tags-box">
        <!--Selected Tokens Here-->
        @for (int index = 0; index < SelectedValues.Count; index++)
        {
            var local_item = SelectedValues[index];
            var local_index = index;
            <div class="chip-accent">
                @local_item
                <i class="ti ti-x delete-tag" @onclick="() => RemoveSelected(local_index)"></i>
            </div>
        }
    </div>

    <input type="text" class="tokenized-search-box" placeholder="type your search here" @bind="InputValue" @oninput="OnInputChange"/>

    <div class="autocomplete-tags">
        <!--PosibleOptionsHere-->
        @for (int index = 0; index < AutoSuggestionValues.Count; index++)
        {
            var item = AutoSuggestionValues[index];
            if (!item.IsHidden)
            {
                <div class="chip-accent" @onclick="() => AddSelected(item.Value)">@item.Value</div>
            }
        }
    </div>
</div>


@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public Action<List<string>> OnTagsChanged { get; set; }
    [Parameter]
    public IEnumerable<Tag> SelectedTags { get; set; }

    public List<string> SelectedValues { get; set; } = new List<string>();
    public List<AutoCompleteCache> AutoSuggestionValues { get; set; } = new List<AutoCompleteCache>();
    public string InputValue { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        foreach (var tag in SelectedTags)
        {
            AddSelected(tag.Value);
        }
    }

    public async Task OnInputChange(ChangeEventArgs e)
    {
        if (e.Value is not string value)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(value))
        {
            return;
        }

        if (value.Length < 3)
        {
            return;
        }

        var tags = await GetTagsAutocomplete(value);

        FilterSuggestions(tags);

        AutoSuggestionValues = tags;
    }

    public void FilterSuggestions(List<AutoCompleteCache> AutoCompleteCache)
    {
        for (int index = AutoCompleteCache.Count - 1; index > -1; index--)
        {
            var tag = AutoCompleteCache[index];

            tag.IsHidden = false;

            for (int subIndex = 0; subIndex < SelectedValues.Count; subIndex++)
            {
                if (tag.Value == SelectedValues[subIndex])
                {
                    tag.IsHidden = true;
                    break;
                }
            }
        }
    }

    public async Task<List<AutoCompleteCache>> GetTagsAutocomplete(string partialInput)
    {
        var tags = await GelbooruService.GetTagsAutocomplete(partialInput);

        return tags.Select(item => new AutoCompleteCache()
            {
                Value = item.Value,
                IsHidden = false,
            }).ToList();
    }

    public void AddSelected(string value)
    {
        SelectedValues.Add(value);
        FilterSuggestions(AutoSuggestionValues);
        OnTagsChanged.Invoke(SelectedValues);
    }

    public void RemoveSelected(int index)
    {
        SelectedValues.RemoveAt(index);
        FilterSuggestions(AutoSuggestionValues);
        OnTagsChanged.Invoke(SelectedValues);
    }

    public class AutoCompleteCache
    {
        public string Value { get; set; }
        public bool IsHidden { get; set; }
    }
}
